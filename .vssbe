{
  "Header": {
    "_": [
      " This file for vsSolutionBuildEvent ",
      " https://github.com/3F/vsSolutionBuildEvent "
    ],
    "Compatibility": "0.12.4"
  },
  "PreBuild": [
    {
      "Enabled": true,
      "Name": "ActDir",
      "Caption": "Prepare output directory",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[($(Configuration) == \"PublicRelease\") {",
          "    #[$(cfgname = 'Release')]",
          "    $(isCIBuild = true)",
          "}",
          "else{",
          "    #[$(cfgname = $(Configuration))]",
          "}]",
          "",
          "#[$(dbin = \"bin/$(cfgname)/\")]",
          "",
          "$(revDeltaBase  = \"2021/01/01\")",
          "$(revDeltaMin   = $([System.Math]::Pow(10, 3)))",
          "$(revDeltaMax   = 65534)",
          "",
          "",
          "$(netstamp  = $(TargetFrameworkVersion.Replace('v', '').Replace('.', '')))",
          "",
          "$(pDir  = \"src\")",
          "$(odir  = \"$(dbin)raw\")",
          "",
          "$(pName = 'UnmanagedEmitCalli')",
          "",
          "$(pTests = \"tests\")",
          "$(pUnLib = \"UnLib\")",
          "",
          "#[var +revBuild]",
          "#[var +bSha1]",
          "#[var +bName]",
          "#[var +bRevc]",
          "",
          "#[var pVer = #[File get(\".version\")]]",
          "",
          "##[IO delete.directory(\"$(dbin)\", true)]",
          "#[IO copy.directory(\"\", \"$(dbin)\", true)]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ModulesAndPkg",
      "Caption": "Submodules and dep packages",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[\" Packages \"]",
          "",
          "#[( !(#[IO exists.file(\"packages/__checked\")]) )",
          "{",
          "    #[File call(\"tools\\hmsbuild.bat\", \"-vsw-priority Microsoft.NetCore.Component.SDK -t:restore /v:q /nologo /p:Configuration=$(Configuration) /p:Platform=\\\"Any CPU\\\"\", 1000)]",
          "        ",
          "    ",
          "    #[IO copy.directory(\"\", \"packages/\", true)]",
          "    #[File write(\"packages/__checked\"): ]",
          "}]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActVer",
      "Caption": "Update version number ...",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[( ! $(isCIBuild) ) {",
          "    #[IO replace.Regex(\"$(pDir)/$(pName)Version.cs\", \"(\\sS_NUM\\s=).+?\\\";\", \"$1 \\\"$(pVer)\\\";\")]",
          "}]",
          "",
          "#[IO replace.Regex(\"$(pDir)/$(pName).csproj\", \"<Version>.+?</Version>\", \"<Version>$(pVer)</Version>\")]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActConariVersion",
      "Caption": "Update ConariVersion",
      "ToConfiguration": [
        "PublicRelease|Any CPU",
        "PublicRelease|Win32",
        "PublicRelease|x64",
        "PublicRelease|x86"
      ],
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[var tpl = // This code was generated by a vsSolutionBuildEvent. ",
          "// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.",
          "namespace net.r_eg.DotNet.System.Reflection.Emit",
          "{",
          "    using global::System;",
          "",
          "    public struct UnmanagedEmitCalliVersion",
          "    {",
          "        public static readonly Version number = new Version(S_NUM_REV);",
          "",
          "        public const string S_NUM = \"%S_NUM%\";",
          "        public const string S_REV = \"%S_REV%\";",
          "",
          "        public const string S_NUM_REV = S_NUM + \".\" + S_REV;",
          "",
          "        public const string B_SHA1 = \"%B_SHA1%\";",
          "        public const string B_NAME = \"%B_NAME%\";",
          "        public const string B_REVC = \"%B_REVC%\";",
          "",
          "        internal const string S_PRODUCT = S_NUM_REV + \"+\" + B_SHA1;",
          "    }",
          "}]",
          "",
          "#[\" ",
          "    Calculate revision",
          "\"]",
          "#[var tBase     = $([System.DateTime]::Parse('$(revDeltaBase)').ToBinary())]",
          "#[var tNow      = $([System.DateTime]::UtcNow.Ticks)]",
          "#[var revBuild  = #[$(",
          "                    [System.TimeSpan]::FromTicks('$(",
          "                        [MSBuild]::Subtract($(tNow), $(tBase))",
          "                    )')",
          "                    .TotalMinutes.ToString('0'))]]",
          "                     ",
          "#[var revBuild  = #[$(",
          "                    [MSBuild]::Add(",
          "                        $(revDeltaMin), ",
          "                        $([MSBuild]::Modulo(",
          "                            $(revBuild), ",
          "                            $([MSBuild]::Subtract(",
          "                                $(revDeltaMax), $(revDeltaMin)",
          "                             ))",
          "                         ))",
          "                     )",
          "                   )]",
          "]",
          "",
          "#[\" ",
          "    Remove placeholders",
          "\"]",
          "#[var tpl = $(tpl.Replace(\"%S_NUM%\", \"$(pVer)\").Replace(\"%S_REV%\", \"$(revBuild)\"))]",
          "",
          "#[\" ",
          "    Checking of the git to define sha1, branch name, etc.",
          "\"]",
          "#[var isGit = #[IO cmd(\"git rev-parse 2>&1\")]]",
          "#[( $(isGit) == \"\" )",
          "{",
          "    #[var bSha1 = #[IO sout(\"git\", \"rev-parse --short HEAD\")]]",
          "    #[var bName = #[IO sout(\"git\", \"rev-parse --abbrev-ref HEAD\")]]",
          "    #[var bRevc = #[IO sout(\"git\", \"rev-list HEAD --count\")]]",
          "    ",
          "    #[($(bName) == \"HEAD\") {",
          "        #[var bName = $(APPVEYOR_REPO_BRANCH)]",
          "    }]",
          "}",
          "else {",
          "    #[$(bSha1 = '-')] #[$(bName = '-')] #[$(bRevc = '-')]",
          "}]",
          "",
          "#[var tpl = #[$(tpl.Replace(\"%B_SHA1%\", \"#[var bSha1]\")",
          "                   .Replace(\"%B_NAME%\", \"#[var bName]\")",
          "                   .Replace(\"%B_REVC%\", \"#[var bRevc]\") )]]",
          "",
          "#[\" ",
          "    Save result",
          "\"]",
          "#[File write(\"$(pDir)/$(pName)Version.cs\"):#[$(tpl.Replace(\"\\n\", \"\\r\\n\"))]]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActInfo",
      "Caption": "Compile info",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[var buildInfo =  $([System.String]::Concat(\"  \"))",
          "    S_NUM:          #[$(pVer)]",
          "    ",
          "    S_REV:          #[$(revBuild)]",
          "    ",
          "    S_NUM_REV:      #[$(pVer)].#[$(revBuild)]",
          "    ",
          "    bSha1:          #[$(bSha1)]",
          "    ",
          "    bName:          #[$(bName)]",
          "    ",
          "    bRevc:          #[$(bRevc)]",
          "    ",
          "    Configuration:  #[$(Configuration)]",
          "    ",
          "    Platforms:      #[$(TargetFrameworks)]",
          "    ",
          "    ",
          "    :: generated by a vsSolutionBuildEvent v#[$(vsSolutionBuildEvent)]",
          "]",
          "",
          "#[( $(isCIBuild) ) { ",
          "    #[IO replace.Regex(\"$(pDir)/$(pName).csproj\", \"<BuildInfoVSSBE>[\\s\\S]*?</BuildInfoVSSBE>\", \"<BuildInfoVSSBE>$(buildInfo.Replace('\\n', '\\r\\n'))</BuildInfoVSSBE>\")]",
          "}else{",
          "    #[IO replace.Regex(\"$(pDir)/$(pName).csproj\", \"<BuildInfoVSSBE>[\\s\\S]*?</BuildInfoVSSBE>\", \"<BuildInfoVSSBE></BuildInfoVSSBE>\")]",
          "}]",
          "",
          "##[IO copy.directory(\"\", \"$(pDir)/obj/\", true)]",
          "##[IO writeLine(\"$(pDir)/obj/build-info.txt\"):#[$(buildInfo.Replace(\"\\n\", \"\\r\\n\"))]]"
        ]
      }
    }
  ],
  "PostBuild": [
    {
      "Enabled": true,
      "Name": "ActBinaries",
      "Caption": "Binaries & tools ...",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[IO copy.file",
          "(",
          "    { \"License.txt\", \"Readme.md\", \"changelog.txt\", \".version\" }, ",
          "    \"$(odir)/\", true",
          ")]",
          "",
          "[( $(cfgname) == \"Release\" )",
          "{",
          "",
          "    #[$(_targets = $(TargetFrameworks:$(pName)))]",
          "    #[$(_loop = true)]",
          "    ",
          "    #[Box iterate(i = 0; $(_loop); i += 1): ",
          "      #[try",
          "      {",
          "        ",
          "        #[$(_target = $(_targets.Split(\";\")[$(i)]))]",
          "        ",
          "        #[IO copy.file",
          "        (",
          "            \"$(pDir)/$(OutputPath:$(pName))/$(_target)/*.*\", ",
          "            \"$(odir)/lib/$(_target)/\", ",
          "            true,",
          "            {\"*.json\"}",
          "        )]",
          "      }",
          "      catch { $(_loop = false) }]",
          "    ]",
          "    ",
          "}]",
          "",
          "##[IO copy.file(\"$(pUnLib)\\bin\\$(cfgname)\\*.dll\", \"$(pTests)\\bin\\$(cfgname)\\\\\", true)]",
          ""
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActPack",
      "Caption": "zip archives etc.",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "[( $(cfgname) == \"Release\" )",
          "{    ",
          "    #[($(revBuild) == \"\" || $(revBuild) ~= \"*\") {",
          "        #[$(zipname = \"$(pName).$(pVer).zip\")]",
          "    }",
          "    else {",
          "        #[$(zipname = \"$(pName).$(pVer).$(revBuild)+$(bSha1).zip\")]",
          "    }]",
          "    ",
          "    #[7z pack.directory(\"$(odir)\", \"$(dbin)\\\\$(zipname)\")]",
          "    ",
          "}]",
          "",
          "",
          "#[IO copy.file",
          "(",
          "    \"src/$(dbin)*$(pVer).nupkg\",",
          "    \"$(dbin)/\", ",
          "    true ",
          ")]",
          "",
          ""
        ]
      }
    }
  ]
}